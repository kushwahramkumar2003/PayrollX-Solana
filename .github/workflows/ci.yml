name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20"

jobs:
  # Build packages (dependencies for services)
  packages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for package-lock.json
        run: |
          if [ ! -f package-lock.json ]; then
            echo "❌ package-lock.json not found!"
            echo "Please run 'npm install' locally to generate package-lock.json"
            exit 1
          fi
          echo "✅ package-lock.json found"

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: |
          npm run build --workspace=packages/common
          npm run build --workspace=packages/contracts
          npm run build --workspace=packages/database
          npm run build --workspace=packages/ui

      - name: Lint packages
        run: |
          npm run lint --workspace=packages/common
          npm run lint --workspace=packages/contracts
          npm run lint --workspace=packages/database
          npm run lint --workspace=packages/ui

  # Build NestJS microservices
  nestjs-services:
    runs-on: ubuntu-latest
    needs: packages
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for package-lock.json
        run: |
          if [ ! -f package-lock.json ]; then
            echo "❌ package-lock.json not found!"
            echo "Please run 'npm install' locally to generate package-lock.json"
            exit 1
          fi
          echo "✅ package-lock.json found"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma clients
        run: npm run db:generate

      - name: Build NestJS services
        run: |
          npm run build --workspace=apps/api-gateway
          npm run build --workspace=apps/auth-service
          npm run build --workspace=apps/org-service
          npm run build --workspace=apps/employee-service
          npm run build --workspace=apps/wallet-service
          npm run build --workspace=apps/payroll-service
          npm run build --workspace=apps/transaction-service
          npm run build --workspace=apps/notification-service
          npm run build --workspace=apps/compliance-service

      - name: Lint NestJS services
        run: |
          npm run lint --workspace=apps/api-gateway
          npm run lint --workspace=apps/auth-service
          npm run lint --workspace=apps/org-service
          npm run lint --workspace=apps/employee-service
          npm run lint --workspace=apps/wallet-service
          npm run lint --workspace=apps/payroll-service
          npm run lint --workspace=apps/transaction-service
          npm run lint --workspace=apps/notification-service
          npm run lint --workspace=apps/compliance-service

  # Build Next.js applications
  nextjs-apps:
    runs-on: ubuntu-latest
    needs: packages
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for package-lock.json
        run: |
          if [ ! -f package-lock.json ]; then
            echo "❌ package-lock.json not found!"
            echo "Please run 'npm install' locally to generate package-lock.json"
            exit 1
          fi
          echo "✅ package-lock.json found"

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js apps
        run: |
          npm run build --workspace=apps/web
          npm run build --workspace=apps/docs

      - name: Lint Next.js apps
        run: |
          npm run lint --workspace=apps/web
          npm run lint --workspace=apps/docs

  # Build Rust MPC server
  rust-mpc-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            apps/mpc-server/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build MPC Server
        working-directory: apps/mpc-server
        run: cargo build --release

      - name: Run Rust Tests
        working-directory: apps/mpc-server
        run: cargo test

      - name: Run Rust Clippy
        working-directory: apps/mpc-server
        run: cargo clippy -- -D warnings
