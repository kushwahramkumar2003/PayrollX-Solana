// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]
  auditLogs     AuditLog[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  email       String?
  website     String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employees Employee[]
  payrollRuns PayrollRun[]

  @@map("organizations")
}

model Employee {
  id             String   @id @default(cuid())
  firstName      String
  lastName       String
  email          String   @unique
  phone          String?
  hireDate       DateTime?
  position       String?
  department     String?
  status         String   @default("ACTIVE")
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  wallet       Wallet?
  payrollItems PayrollItem[]
  transactions Transaction[]

  @@map("employees")
}

model Wallet {
  id          String   @id @default(cuid())
  employeeId  String   @unique
  publicKey   String
  keyShareIds String[]
  provider    String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model PayrollRun {
  id             String      @id @default(cuid())
  organizationId String
  name           String?
  payPeriodStart DateTime
  payPeriodEnd   DateTime
  payDate        DateTime
  status         String      @default("DRAFT")
  totalAmount    Float?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  organization Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  items        PayrollItem[]
  transactions Transaction[]

  @@map("payroll_runs")
}

model PayrollItem {
  id           String  @id @default(cuid())
  payrollRunId String
  employeeId   String
  grossAmount  Float
  deductions   Float   @default(0)
  bonuses      Float   @default(0)
  netAmount    Float?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  payrollRun PayrollRun @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)
  employee   Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("payroll_items")
}

model Transaction {
  id           String   @id @default(cuid())
  payrollRunId String
  employeeId   String
  type         String
  amount       Float
  tokenAddress String?
  signature    String?
  status       String   @default("PENDING")
  error        String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  completedAt  DateTime?

  payrollRun PayrollRun @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)
  employee   Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  type       String
  recipient  String
  subject    String
  content    String
  templateId String?
  metadata   String?
  status     String   @default("PENDING")
  error      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sentAt     DateTime?

  @@map("notifications")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entityType String
  entityId   String
  details    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model ComplianceReport {
  id          String   @id @default(cuid())
  name        String
  format      String
  status      String   @default("GENERATING")
  startDate   DateTime
  endDate     DateTime
  filters     String?
  filePath    String?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?

  @@map("compliance_reports")
}

